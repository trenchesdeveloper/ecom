// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "github.com/trenchesdeveloper/go-ecom/types"
)

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: order
func (_m *OrderStore) CreateOrder(order types.Order) (int, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Order) (int, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(types.Order) int); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(types.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderItem provides a mock function with given fields: orderItem
func (_m *OrderStore) CreateOrderItem(orderItem types.OrderItem) error {
	ret := _m.Called(orderItem)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.OrderItem) error); ok {
		r0 = rf(orderItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderStore creates a new instance of OrderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderStore {
	mock := &OrderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
